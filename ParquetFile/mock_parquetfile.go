// Code generated by MockGen. DO NOT EDIT.
// Source: ParquetFile.go

// Package ParquetFile is a generated GoMock package.
package ParquetFile

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockParquetFile is a mock of ParquetFile interface
type MockParquetFile struct {
	ctrl     *gomock.Controller
	recorder *MockParquetFileMockRecorder
}

// MockParquetFileMockRecorder is the mock recorder for MockParquetFile
type MockParquetFileMockRecorder struct {
	mock *MockParquetFile
}

// NewMockParquetFile creates a new mock instance
func NewMockParquetFile(ctrl *gomock.Controller) *MockParquetFile {
	mock := &MockParquetFile{ctrl: ctrl}
	mock.recorder = &MockParquetFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParquetFile) EXPECT() *MockParquetFileMockRecorder {
	return m.recorder
}

// Seek mocks base method
func (m *MockParquetFile) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockParquetFileMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockParquetFile)(nil).Seek), offset, whence)
}

// Read mocks base method
func (m *MockParquetFile) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockParquetFileMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockParquetFile)(nil).Read), p)
}

// Write mocks base method
func (m *MockParquetFile) Write(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockParquetFileMockRecorder) Write(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockParquetFile)(nil).Write), p)
}

// Close mocks base method
func (m *MockParquetFile) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockParquetFileMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockParquetFile)(nil).Close))
}

// Open mocks base method
func (m *MockParquetFile) Open(name string) (ParquetFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(ParquetFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open
func (mr *MockParquetFileMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockParquetFile)(nil).Open), name)
}

// Create mocks base method
func (m *MockParquetFile) Create(name string) (ParquetFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(ParquetFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockParquetFileMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockParquetFile)(nil).Create), name)
}
